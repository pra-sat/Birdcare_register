// script.js (main_admin)
const GAS_ENDPOINT = 'https://script.google.com/macros/s/AKfycbxdxUvmwLS3_nETwGLk4J8ipPq2LYNSWyhJ2ZwVsEJQgONG11NSSX3jVaeqWCU1TXvE5g/exec';
window.liffId = '2007421084-2OgzWbpV';

document.addEventListener('DOMContentLoaded', () => {
  const adminManager = new AdminManager();
  adminManager.init();
});


//----------------------------------------------------------------- QRScanner --------------------------------------------------
class QRScanner {
    
  constructor() {
    this.isScanning = false;
    this.pointPerBaht = 0.1;
    this.adminUserId = '';
    this.adminName = '-';
    this.token = '';
    this.foundUser = null;
    this.serviceList = [];
    this.currentCameraIndex = 0;
    this.html5QrCode = null;
    this.cameraList = [];

      // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ onclick ‡πÉ‡∏ô HTML
        document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('manualPhone')?.addEventListener('keyup', (e) => {
          if (e.key === 'Enter') this.manualSearch();
        });
        document.querySelector('#scannerSearchBtn')?.addEventListener('click', () => this.manualSearch());
        document.querySelector('#scannerSwitchBtn')?.addEventListener('click', () => this.toggleCamera());
        document.querySelector('#scannerCloseBtn')?.addEventListener('click', () => this.closePopup());
      });
  }
    
    togglePopup(show = true) {
      const popup = document.getElementById('scanPopup');
      if (!popup) return;
      if (show) {
        popup.classList.add('show');
      } else {
        popup.classList.remove('show');
      }
    }
  
  async openScanPopup() {
    this.togglePopup(true); 
    if (!this.adminUserId) {
       await this.init(); // ‚úÖ ‡∏£‡∏≠ init ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    }
      
    const { userId, name, token } = window.adminInfo || {};
    if (userId && name) {
      this.adminUserId = userId;
      this.adminName = name;
      this.token = token;
    }
    
    this.startCamera();
    this.loadServices();
  }

  closePopup() {
    const popup = document.getElementById('scanPopup');
    if (popup) this.togglePopup(false);
    if (this.html5QrCode) this.html5QrCode.stop();
  }

  async init() {
    await liff.init({ liffId: window.liffId });
    if (!liff.isLoggedIn()) return liff.login();

    const profile = await liff.getProfile().catch(err => {
      Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE", err.message || '', 'error');
    });
    if (!profile) return;

    this.adminUserId = profile.userId;
    this.token = liff.getIDToken ? await liff.getIDToken() : '';

    const res = await fetch(`${GAS_ENDPOINTS}?action=check_admin&userId=${this.adminUserId}`);
    const result = await res.json();

    this.adminName = result.name || '-';
    document.getElementById('adminName').textContent = this.adminName;
    document.getElementById('adminRole').textContent = `‡∏£‡∏∞‡∏î‡∏±‡∏ö ${result.level || '-'}`;

    this.logAction('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Scan', '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ scan');
    this.loadServices();
    
    document.getElementById('manualPhone')?.addEventListener('keyup', (e) => {
      if (e.key === 'Enter') this.manualSearch();
    });
  }

  logAction(title, detail) {
    fetch(GAS_ENDPOINTS + '?action=log_admin', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify({
        action: 'log_admin',
        name: this.adminName,
        userId: this.adminUserId,
        actionTitle: title,
        detail,
        device: navigator.userAgent,
        token: this.token,
      })
    });
  }

  async onServiceSave() {
    const name = document.getElementById('serviceName').value.trim();
    const price = parseFloat(document.getElementById('priceInput').value) || 0;
    const note = document.getElementById('noteInput').value.trim();
    const point = Math.floor(price * this.pointPerBaht);
  
    if (!name || price <= 0) {
      Swal.showValidationMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
  
    if (!this.serviceList.length) {
      Swal.fire('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ 1-2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', 'warning');
      return;
    }
  
    Swal.fire({ title: '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
  
    const payload = {
      action: 'record_service',
      userId: this.foundUser.UserID,
      nameLine: this.foundUser.nameLine || '',
      statusMessage: this.foundUser.statusMessage || '',
      pictureUrl: this.foundUser.pictureUrl || '',
      brand: this.foundUser.Brand,
      model: this.foundUser.Model,
      year: this.foundUser.Year,
      category: this.foundUser.Category || '',
      serviceName: name,
      price,
      point,
      note,
      //timestamp: new Date().toISOString(),
      timestamp: this.getThaiDateTime(), // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/MM/yyyy, HH:mm:ss
      admin: this.adminName
    };

  
    // ‚úÖ DEBUG log
    console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á payload ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Apps Script:", payload);
  
    const res = await fetch(GAS_ENDPOINTS + '?action=record_service', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify(payload)
    });
      
    const result = await res.json();
    Swal.close();
  
    // ‚úÖ DEBUG result
    console.log("üì• ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å GAS:", result);
  
    if (result.success) {
      this.logAction('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', `‚úÖ ${name} (${price} ‡∏ö‡∏≤‡∏ó)`);
      Swal.fire('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', `‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${name}<br>‡πÅ‡∏ï‡πâ‡∏°: ${point}`, 'success').then(() => liff.closeWindow());
    } else {
      this.logAction('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', `‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${name}, ‡πÄ‡∏´‡∏ï‡∏∏: ${result.message}`);
      Swal.fire('‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', result.message || '', 'error');
    }
  }

 startCamera() {
  try {
    if (!this.html5QrCode) {
      this.html5QrCode = new Html5Qrcode('reader');
    }

    Html5Qrcode.getCameras()
      .then(cameras => {
        if (!cameras.length) {
          Swal.fire('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á', '', 'error');
          console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ");
          return;
        }

        if (this.html5QrCode._isScanning) {
          console.log("üì∏ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");
          return;
        }

        this.cameraList = cameras;
        const backCam = cameras.find(cam => /back|environment/i.test(cam.label));
        const camId = backCam ? backCam.id : cameras[0].id;
        this.currentCameraIndex = cameras.findIndex(cam => cam.id === camId);

        this.html5QrCode.start(
          camId,
          { fps: 10, qrbox: 250 },
          text => this.onScanSuccess(text)
        );
      })
      .catch(err => {
        Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á', err.message || '', 'error');
        console.error("‚ùå startCamera error:", err);
      });  
     } catch (e) {
      Swal.fire('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', e.message || '', 'error');
       console.error("‚ùå html5QrCode init fail:", e);
    }
   }

  toggleCamera() {
    if (!this.cameraList.length || !this.html5QrCode) return;
    this.html5QrCode.stop().then(() => {
      this.currentCameraIndex = (this.currentCameraIndex + 1) % this.cameraList.length;
      this.html5QrCode.start(
        this.cameraList[this.currentCameraIndex].id,
        { fps: 10, qrbox: 250 },
        (decodedText) => this.onScanSuccess(decodedText)
      );
    });
  }

  getThaiDateTime(dateObj = new Date()) {
    const d = dateObj;
    const day = d.getDate().toString().padStart(2, '0');
    const month = (d.getMonth() + 1).toString().padStart(2, '0');
    const year = d.getFullYear();
    const hour = d.getHours().toString().padStart(2, '0');
    const minute = d.getMinutes().toString().padStart(2, '0');
    const second = d.getSeconds().toString().padStart(2, '0');
    return `${day}/${month}/${year}, ${hour}:${minute}:${second}`;
  }

  async manualSearch() {
    const phone = document.getElementById('manualPhone').value;
    if (!phone) return;

    Swal.fire({ title: 'üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...', allowOutsideClick: false, showConfirmButton: false, didOpen: () => Swal.showLoading() });
    const res = await fetch(`${GAS_ENDPOINTS}?action=search_phone&phone=${phone}`);
    const result = await res.json();
    Swal.close();

    if (!result.success) return Swal.fire('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '', 'error');
    document.getElementById('manualPhone').value = '';
    this.foundUser = result.data;
    this.showCustomerPopup();
        /** ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Swal */
      this.closePopup(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡∏õ‡∏¥‡∏î popup
      setTimeout(() => this.showCustomerPopup(), 300); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á Swal
  }

  async onScanSuccess(token) {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î
    if (this.html5QrCode) {
      await this.html5QrCode.stop();
    }

    if (this.isScanning) return;
    this.isScanning = true;
    setTimeout(() => { this.isScanning = false; }, 2000); // 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
    Swal.fire({
      title: 'üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ QR...',
      allowOutsideClick: false,
      showConfirmButton: false,
      didOpen: () => Swal.showLoading()
    });
  
    const res = await fetch(`${GAS_ENDPOINTS}?action=verify_token&token=${token}`);
    const result = await res.json();
    Swal.close();
  
    if (!result.success) {
      Swal.fire('QR ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '', 'error');
      this.isScanning = false;
      this.startCamera(); // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
      return;
    }
    this.foundUser = result.data;
    this.showCustomerPopup(); // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß

        /** ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Swal */
      this.closePopup(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡∏õ‡∏¥‡∏î popup
      setTimeout(() => this.showCustomerPopup(), 300); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á Swal
  }


  loadServices() {
    const existingList = document.getElementById('serviceOptions');
    if (existingList) existingList.remove();

    fetch(`${GAS_ENDPOINTS}?action=service_list`)
      .then(res => res.json())
      .then(data => {
        this.serviceList = data;
        const datalist = document.createElement('datalist');
        datalist.id = 'serviceOptions';
        data.forEach(item => {
          const opt = document.createElement('option');
          opt.value = item.name;
          datalist.appendChild(opt);
        });
        document.body.appendChild(datalist);
      });
  }

  showCustomerPopup() {
    Swal.fire({
      title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      html: `
        <p>‡∏ä‡∏∑‡πà‡∏≠: ${this.foundUser.Name}</p>
        <p>‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${this.foundUser.Phone}</p>
        <p>‡∏£‡∏ñ: ${this.foundUser.Brand} ${this.foundUser.Model} ${this.foundUser.Year}</p>
        <input list="serviceOptions" id="serviceName" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" class="swal2-input">
        <input type="number" id="priceInput" placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤" class="swal2-input">
        <p>‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ: <span id="pointPreview">0</span></p>
        <input type="text" id="noteInput" placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" class="swal2-input">
      `,
      confirmButtonText: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
      didOpen: () => {
        const priceInput = document.getElementById('priceInput');
        const pointPreview = document.getElementById('pointPreview');
        priceInput.addEventListener('input', () => {
          const p = parseFloat(priceInput.value) || 0;
          pointPreview.textContent = Math.floor(p * this.pointPerBaht);
        });
      },
      preConfirm: () => this.onServiceSave()
    });
  }
}


//----------------------------------------------------------------- main admin --------------------------------------------------
class AdminManager {
  constructor() {
    this.userId = "N/A";
    this.name = "-";
    this.statusMessage = "";
    this.pictureUrl = "";
    this.token = "N/A";
  }

  async init() {
    try {
      Swal.fire({
        title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => Swal.showLoading()
      });

      await liff.init({ liffId: window.liffId });
      if (!liff.isLoggedIn()) return liff.login();

      const profile = await liff.getProfile();
      this.userId = profile.userId;
      this.name = profile.displayName;
      this.statusMessage = profile.statusMessage || "";
      this.pictureUrl = profile.pictureUrl || "";

      if (liff.getIDToken && typeof liff.getIDToken === 'function') {
        this.token = await liff.getIDToken();
      }

      await Promise.all([
        this.updateLineProfile(profile),
        this.checkAdmin()
      ]);

    } catch (err) {
      Swal.close();
      Swal.fire({
        icon: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        confirmButtonText: '‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á'
      }).then(() => liff.closeWindow());
      console.error(err);
    }
  }

  async updateLineProfile(profile) {
    try {
      const payload = {
        action: 'update_line_profile',
        userId: profile.userId,
        nameLine: profile.displayName,
        statusMessage: profile.statusMessage || "",
        pictureUrl: profile.pictureUrl || ""
      };

      const res = await fetch(GAS_ENDPOINT + '?action=update_line_profile', {
        method: 'POST',
        headers: { "Content-Type": "text/plain;charset=utf-8" },
        body: JSON.stringify(payload)
      });

      const data = await res.json();
      console.log("‚úÖ LINE Profile ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:", data);
    } catch (err) {
      console.warn("‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    }
  }

  async checkAdmin() {
    const res = await fetch(`${GAS_ENDPOINT}?action=check_admin&userId=${this.userId}&name=${encodeURIComponent(this.name)}&statusMessage=${encodeURIComponent(this.statusMessage)}&pictureUrl=${encodeURIComponent(this.pictureUrl)}`);
    const result = await res.json();

    Swal.close();

    if (result.blacklisted) {
      return Swal.fire({
        icon: 'error',
        title: 'üö´ ‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå',
        text: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ',
        confirmButtonText: '‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á'
      }).then(() => liff.closeWindow());
    }

    if (!result.isAdmin) {
      return Swal.fire({
        icon: 'error',
        title: '‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï',
        confirmButtonText: '‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á'
      }).then(() => liff.closeWindow());
    }

    await this.logAction(result.name, '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ admin');
    document.body.style.display = 'block';
    document.getElementById('adminName').textContent = result.name || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠';
    document.getElementById('adminLevel').textContent = result.level || '1';
    document.getElementById('adminRole').textContent = result.role || '-';

    const level = parseInt(result.level || '1');
    if (level >= 1) document.querySelector('[data-menu="feedback"]')?.classList.remove("hidden");
    if (level >= 2) document.getElementById('scanBtn')?.classList.remove("hidden");{
      window.adminInfo = {
        userId: this.userId,
        name: this.name,
        token: this.token
      };
    }
    if (level >= 3) document.querySelector('[data-menu="stats"]')?.classList.remove("hidden");
    if (level >= 5) document.querySelector('[data-menu="settings"]')?.classList.remove("hidden");
  }

  async logAction(name, action, detail) {
    try {
      const res = await fetch(GAS_ENDPOINT + '?action=log_admin', {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
        body: JSON.stringify({
          action: 'log_admin',
          name,
          userId: this.userId,
          actionTitle: action,
          detail,
          device: navigator.userAgent,
          token: this.token
        })
      });

      const result = await res.json();
      console.log("üìò ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Admin Log:", result);
    } catch (err) {
      console.warn("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  }

  logout() {
    liff.logout();
    liff.closeWindow();
  }
}

const scannerInstance = new QRScanner();
window.scanner = scannerInstance;

document.getElementById('scanBtn')?.addEventListener('click', async () => {
  if (window.scanner?.openScanPopup) {
    await window.scanner.openScanPopup();
  } else {
    Swal.fire("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á", "‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "error");
  }
});
