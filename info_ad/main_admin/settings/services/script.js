// ‚úÖ script.js - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Service Management (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)

const GAS_ENDPOINT = 'https://script.google.com/macros/s/AKfycbxdxUvmwLS3_nETwGLk4J8ipPq2LYNSWyhJ2ZwVsEJQgONG11NSSX3jVaeqWCU1TXvE5g/exec';
const liffId = '2007421084-2OgzWbpV';

let userId = "N/A";
let currentAdmin = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin ‡∏´‡∏•‡∏±‡∏á login
let currentService = null; // ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

function logout() {
  liff.logout();
  liff.closeWindow();
}

function showLoading() {
  Swal.fire({
    title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
    allowOutsideClick: false,
    showConfirmButton: false,
    didOpen: () => Swal.showLoading()
  });
}

function hideLoading() {
  Swal.close();
}

function showError(message) {
  Swal.fire({
    icon: 'error',
    title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
    text: message,
    confirmButtonText: '‡∏õ‡∏¥‡∏î'
  });
}

function openAddPopup() {
  document.getElementById('addPopup').classList.remove('hidden');
}

function closeAddPopup() {
  document.getElementById('addPopup').classList.add('hidden');
}

function closeViewPopup() {
  document.getElementById('viewPopup').classList.add('hidden');
  document.getElementById('saveBtn').classList.add('hidden');
  document.getElementById('editBtn').classList.remove('hidden');
  toggleEditMode(false);
}

function toggleServiceList() {
  document.getElementById('serviceList').classList.toggle('hidden');
}

function toggleServiceStatus() {
  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ enable edit
  // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ future use ‡∏Å‡πá‡πÑ‡∏î‡πâ
}

async function logAdminAction(action, detail) {
  try {
    await fetch(GAS_ENDPOINT + '?action=log_admin', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify({
        action: 'log_admin',
        name: currentAdmin.name,
        userId: userId,
        actionTitle: action,
        detail: detail,
        device: navigator.userAgent,
        token: await liff.getIDToken()
      })
    });
  } catch (err) {
    console.warn('Log failed:', err);
  }
}

function createServiceCard(service) {
  const card = document.createElement('div');
  card.className = 'service-card';
  card.draggable = true;
  card.dataset.id = service.serviceId;
  card.innerHTML = `
    <h3>${service.name}</h3>
    <p>‡∏£‡∏≤‡∏Ñ‡∏≤: ${service.price} ‡∏ö‡∏≤‡∏ó</p>
    <p>‡πÅ‡∏ï‡πâ‡∏°: ${service.point}</p>
    <p>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${service.detail}</p>
    <label class="toggle-switch">
      <input type="checkbox" ${service.status === 'on' ? 'checked' : ''} data-id="${service.serviceId}">
      <span class="slider"></span>
    </label>
  `;
  card.addEventListener('click', () => showServiceDetailPopup(service));
  card.addEventListener('dragstart', dragStart);
  card.addEventListener('dragover', dragOver);
  card.addEventListener('drop', drop);
  return card;
}

function renderServiceList(list) {
  const listEl = document.getElementById('serviceList');
  listEl.innerHTML = '';
  list.forEach(service => listEl.appendChild(createServiceCard(service)));
  listEl.classList.remove('hidden');
}

async function fetchServices() {
  showLoading();
  try {
    const res = await fetch(GAS_ENDPOINT + '?action=service&sub_action=get_service_list');
    const data = await res.json();
    renderServiceList(data.services);
    await logAdminAction('‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Service_List');
  } catch (err) {
    console.error(err);
    showError('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } finally {
    hideLoading();
  }
}

async function submitAddService() {
  const name = document.getElementById('addName').value.trim();
  const price = document.getElementById('addPrice').value.trim();
  const point = document.getElementById('addPoint').value.trim();
  const detail = document.getElementById('addDetail').value.trim();

  if (!name || !price || !point) {
    showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
    return;
  }

  showLoading();
  try {
    const payload = {
      action: 'add_service',
      name,
      price,
      point,
      detail,
      createdBy: currentAdmin.name
    };

    await fetch(GAS_ENDPOINT + '?action=service', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify(payload)
    });

    await logAdminAction('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', `‡∏ä‡∏∑‡πà‡∏≠: ${name}, ‡∏£‡∏≤‡∏Ñ‡∏≤: ${price}, ‡πÅ‡∏ï‡πâ‡∏°: ${point}`);
    closeAddPopup(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö add
    fetchServices();
  } catch (err) {
    console.error(err);
    showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ');
  } finally {
    hideLoading();
  }
}

function showServiceDetailPopup(service) {
  currentService = service;
  document.getElementById('popupTitle').textContent = `üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£`;
  document.getElementById('viewName').value = service.name;
  document.getElementById('viewPrice').value = service.price;
  document.getElementById('viewPoint').value = service.point;
  document.getElementById('viewDetail').value = service.detail;
  document.getElementById('viewStatus').checked = (service.status === 'on');
  document.getElementById('viewPopup').classList.remove('hidden');
  document.getElementById('viewPopup').dataset.serviceId = service.serviceId;
}

function toggleEditMode(enable = true) {
  document.getElementById('viewName').disabled = !enable;
  document.getElementById('viewPrice').disabled = !enable;
  document.getElementById('viewPoint').disabled = !enable;
  document.getElementById('viewDetail').disabled = !enable;

  document.getElementById('editBtn').classList.toggle('hidden', enable);
  document.getElementById('saveBtn').classList.toggle('hidden', !enable);
}


async function saveEditedService() {
  const name = document.getElementById('viewName').value.trim();
  const price = document.getElementById('viewPrice').value.trim();
  const point = document.getElementById('viewPoint').value.trim();
  const detail = document.getElementById('viewDetail').value.trim();
  const status = document.getElementById('viewStatus').checked ? 'on' : 'off';
  const serviceId = document.getElementById('viewPopup').dataset.serviceId;

  if (!name || !price || !point) {
    showError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
    return;
  }

  showLoading();
  try {
    await fetch(GAS_ENDPOINT + '?action=service', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify({
        action: 'update_service',
        serviceId,
        name,
        price,
        point,
        detail,
        status,
        updatedBy: currentAdmin.name
      })
    });

    await logAdminAction('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', `‡∏ä‡∏∑‡πà‡∏≠: ${name}, ‡∏£‡∏≤‡∏Ñ‡∏≤: ${price}, ‡πÅ‡∏ï‡πâ‡∏°: ${point}, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}`);
    closeViewPopup(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö save / delete
    fetchServices();
  } catch (err) {
    console.error(err);
    showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ');
  } finally {
    hideLoading();
  }
}

async function deleteService() {
  const serviceId = document.getElementById('viewPopup').dataset.serviceId;

  const confirm = await Swal.fire({
    icon: 'warning',
    title: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£?',
    text: '‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ',
    showCancelButton: true,
    confirmButtonText: '‡∏•‡∏ö‡πÄ‡∏•‡∏¢',
    cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
  });

  if (!confirm.isConfirmed) return;

  showLoading();
  try {
    await fetch(GAS_ENDPOINT + '?action=service', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify({
        action: 'delete_service',
        serviceId
      })
    });

    await logAdminAction('‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', `ID: ${serviceId}`);
    closeViewPopup(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö save / delete
    fetchServices();
  } catch (err) {
    console.error(err);
    showError('‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } finally {
    hideLoading();
  }
}

// ‚úÖ Drag-and-drop support
let dragSrcEl = null;

function dragStart(e) {
  dragSrcEl = this;
  e.dataTransfer.effectAllowed = 'move';
  e.dataTransfer.setData('text/html', this.outerHTML);
  this.classList.add('dragElem');
}

function dragOver(e) {
  e.preventDefault();
  this.classList.add('over');
}

function drop(e) {
  e.preventDefault();
  if (dragSrcEl !== this) {
    const list = document.getElementById('serviceList');
    list.insertBefore(dragSrcEl, this);
    updateServiceOrder();
  }
  this.classList.remove('over');
  dragSrcEl.classList.remove('dragElem');
}

async function updateServiceOrder() {
  const ids = [...document.querySelectorAll('#serviceList .service-card')].map(el => el.dataset.id);
  try {
    await fetch(GAS_ENDPOINT + '?action=service', {
      method: 'POST',
      headers: { 'Content-Type': 'text/plain;charset=utf-8' },
      body: JSON.stringify({
        action: 'update_order',
        order: ids
      })
    });
    await logAdminAction('‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà', ids.join(", "));
  } catch (err) {
    console.warn('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
  }
}


document.addEventListener('DOMContentLoaded', async () => {
  showLoading();
  try {
    await liff.init({ liffId });
    if (!liff.isLoggedIn()) return liff.login();

    const profile = await liff.getProfile();
    userId = profile.userId;

    const res = await fetch(`${GAS_ENDPOINT}?action=check_admin&userId=${userId}`);
    const result = await res.json();

    if (!result.isAdmin || result.level < 5) {
      showError('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
      return;
    }

    currentAdmin = result;
    document.getElementById('adminName').textContent = result.name;
    document.getElementById('adminLevel').textContent = result.level;
    document.getElementById('adminRole').textContent = result.role;

    await logAdminAction('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Services', '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£');
  } catch (err) {
    console.error(err);
    showError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏î‡πâ');
  } finally {
    hideLoading();
  }

  const addBtn = document.getElementById('addServiceBtn');
  const listBtn = document.getElementById('showAllBtn');
  const backBtn = document.getElementById('backBtn');
  const logoutBtn = document.getElementById('logoutBtn');

  if (addBtn) addBtn.addEventListener('click', openAddPopup);
  if (listBtn) listBtn.addEventListener('click', fetchServices);
  if (backBtn) backBtn.addEventListener('click', () => location.href = '../index.html');
  if (logoutBtn) logoutBtn.addEventListener('click', logout);
});
